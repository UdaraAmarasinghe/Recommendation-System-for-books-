{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YdTZGyn_pk0m"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hcBbXImVpmzi",
        "outputId": "f0f3cec5-0c02-418b-9467-57de8bdbc67c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HHZkex87lsbO"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "from collections import defaultdict\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VFCh__ecmC0h"
      },
      "outputs": [],
      "source": [
        "#displaying all the rows &columns\n",
        "pd.set_option('display.max_rows', None)\n",
        "pd.set_option('display.max_columns', None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FuCjaovAmJ1Z",
        "outputId": "8406bf9e-1c33-483b-822e-73509931eaa1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         asin                                              title  \\\n",
            "0  B00TZE87S4  Adult Children of Emotionally Immature Parents...   \n",
            "1  B08WCKY8MB  From Strength to Strength: Finding Success, Ha...   \n",
            "2  B09KPS84CJ  Good Inside: A Guide to Becoming the Parent Yo...   \n",
            "3  B07S7QPG6J             Everything I Know About Love: A Memoir   \n",
            "4  B00N6PEQV0  The Seven Principles for Making Marriage Work:...   \n",
            "\n",
            "              author                    soldBy  \\\n",
            "0  Lindsay C. Gibson   Amazon.com Services LLC   \n",
            "1   Arthur C. Brooks   Penguin Group (USA) LLC   \n",
            "2      Becky Kennedy  HarperCollins Publishers   \n",
            "3     Dolly Alderton  HarperCollins Publishers   \n",
            "4       John Gottman          Random House LLC   \n",
            "\n",
            "                                              imgUrl  \\\n",
            "0  https://m.media-amazon.com/images/I/713KZTsaYp...   \n",
            "1  https://m.media-amazon.com/images/I/A1LZcJFs9E...   \n",
            "2  https://m.media-amazon.com/images/I/71RIWM0sv6...   \n",
            "3  https://m.media-amazon.com/images/I/71QdQpTiKZ...   \n",
            "4  https://m.media-amazon.com/images/I/813o4WOs+w...   \n",
            "\n",
            "                             productURL  stars  reviews  price  \\\n",
            "0  https://www.amazon.com/dp/B00TZE87S4    4.8        0   9.99   \n",
            "1  https://www.amazon.com/dp/B08WCKY8MB    4.4        0  16.99   \n",
            "2  https://www.amazon.com/dp/B09KPS84CJ    4.8        0  16.99   \n",
            "3  https://www.amazon.com/dp/B07S7QPG6J    4.2        0   9.95   \n",
            "4  https://www.amazon.com/dp/B00N6PEQV0    4.7        0  13.99   \n",
            "\n",
            "   isKindleUnlimited  category_id  isBestSeller  isEditorsPick  \\\n",
            "0              False            6          True          False   \n",
            "1              False            6         False          False   \n",
            "2              False            6         False           True   \n",
            "3               True            6         False           True   \n",
            "4              False            6         False          False   \n",
            "\n",
            "   isGoodReadsChoice publishedDate              category_name  \\\n",
            "0              False    2015-06-01  Parenting & Relationships   \n",
            "1              False    2022-02-15  Parenting & Relationships   \n",
            "2              False    2022-09-13  Parenting & Relationships   \n",
            "3              False    2020-02-25  Parenting & Relationships   \n",
            "4              False    2015-05-05  Parenting & Relationships   \n",
            "\n",
            "                                                tags          userID  \n",
            "0  Adult Children of Emotionally Immature Parents...  B00TZE87S4_123  \n",
            "1  From Strength to Strength: Finding Success, Ha...  B00TZE87S4_456  \n",
            "2  Good Inside: A Guide to Becoming the Parent Yo...  B00TZE87S4_789  \n",
            "3             Everything I Know About Love: A Memoir  B00TZE87S4_456  \n",
            "4  The Seven Principles for Making Marriage Work:...  B00TZE87S4_678  \n"
          ]
        }
      ],
      "source": [
        "# Load the dataset\n",
        "data = pd.read_csv(r\"/content/drive/MyDrive/IRWA project/kindle_data-v2.csv\")\n",
        "\n",
        "# Add a new column 'tags' that duplicates the 'title' column\n",
        "data['tags'] = data['title']\n",
        "\n",
        "\n",
        "# Create a new UserID column\n",
        "def generate_user_ids(first_asin, num_rows, increments):\n",
        "    user_ids = []\n",
        "    for i in range(num_rows):\n",
        "        increment = increments[i % len(increments)]\n",
        "        user_id = f\"{first_asin}_{increment}\"\n",
        "        user_ids.append(user_id)\n",
        "    return user_ids\n",
        "\n",
        "# Get the first asin\n",
        "first_asin = data['asin'].iloc[0]\n",
        "\n",
        "increments = [123, 456, 789, 456, 678, 457, 890, 321, 654, 987, 432, 567, 876, 543, 210]\n",
        "data['userID'] = generate_user_ids(first_asin, len(data), increments)\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "print(data.head())\n",
        "\n",
        "# Identify duplicated userIDs\n",
        "duplicated_user_ids = data[data['userID'].duplicated(keep=False)]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "AIQQJGQoqUwx",
        "outputId": "f768ad33-60b2-41ab-ae0c-6c8a70fccd42"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         asin                                              title  \\\n",
              "0  B00TZE87S4  Adult Children of Emotionally Immature Parents...   \n",
              "1  B08WCKY8MB  From Strength to Strength: Finding Success, Ha...   \n",
              "2  B09KPS84CJ  Good Inside: A Guide to Becoming the Parent Yo...   \n",
              "3  B07S7QPG6J             Everything I Know About Love: A Memoir   \n",
              "4  B00N6PEQV0  The Seven Principles for Making Marriage Work:...   \n",
              "\n",
              "              author                    soldBy  \\\n",
              "0  Lindsay C. Gibson   Amazon.com Services LLC   \n",
              "1   Arthur C. Brooks   Penguin Group (USA) LLC   \n",
              "2      Becky Kennedy  HarperCollins Publishers   \n",
              "3     Dolly Alderton  HarperCollins Publishers   \n",
              "4       John Gottman          Random House LLC   \n",
              "\n",
              "                                              imgUrl  \\\n",
              "0  https://m.media-amazon.com/images/I/713KZTsaYp...   \n",
              "1  https://m.media-amazon.com/images/I/A1LZcJFs9E...   \n",
              "2  https://m.media-amazon.com/images/I/71RIWM0sv6...   \n",
              "3  https://m.media-amazon.com/images/I/71QdQpTiKZ...   \n",
              "4  https://m.media-amazon.com/images/I/813o4WOs+w...   \n",
              "\n",
              "                             productURL  stars  reviews  price  \\\n",
              "0  https://www.amazon.com/dp/B00TZE87S4    4.8        0   9.99   \n",
              "1  https://www.amazon.com/dp/B08WCKY8MB    4.4        0  16.99   \n",
              "2  https://www.amazon.com/dp/B09KPS84CJ    4.8        0  16.99   \n",
              "3  https://www.amazon.com/dp/B07S7QPG6J    4.2        0   9.95   \n",
              "4  https://www.amazon.com/dp/B00N6PEQV0    4.7        0  13.99   \n",
              "\n",
              "   isKindleUnlimited  category_id  isBestSeller  isEditorsPick  \\\n",
              "0              False            6          True          False   \n",
              "1              False            6         False          False   \n",
              "2              False            6         False           True   \n",
              "3               True            6         False           True   \n",
              "4              False            6         False          False   \n",
              "\n",
              "   isGoodReadsChoice publishedDate              category_name  \\\n",
              "0              False    2015-06-01  Parenting & Relationships   \n",
              "1              False    2022-02-15  Parenting & Relationships   \n",
              "2              False    2022-09-13  Parenting & Relationships   \n",
              "3              False    2020-02-25  Parenting & Relationships   \n",
              "4              False    2015-05-05  Parenting & Relationships   \n",
              "\n",
              "                                                tags          userID  \n",
              "0  Adult Children of Emotionally Immature Parents...  B00TZE87S4_123  \n",
              "1  From Strength to Strength: Finding Success, Ha...  B00TZE87S4_456  \n",
              "2  Good Inside: A Guide to Becoming the Parent Yo...  B00TZE87S4_789  \n",
              "3             Everything I Know About Love: A Memoir  B00TZE87S4_456  \n",
              "4  The Seven Principles for Making Marriage Work:...  B00TZE87S4_678  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e22b5d6-94a5-4408-a8e2-9f888b138bec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>asin</th>\n",
              "      <th>title</th>\n",
              "      <th>author</th>\n",
              "      <th>soldBy</th>\n",
              "      <th>imgUrl</th>\n",
              "      <th>productURL</th>\n",
              "      <th>stars</th>\n",
              "      <th>reviews</th>\n",
              "      <th>price</th>\n",
              "      <th>isKindleUnlimited</th>\n",
              "      <th>category_id</th>\n",
              "      <th>isBestSeller</th>\n",
              "      <th>isEditorsPick</th>\n",
              "      <th>isGoodReadsChoice</th>\n",
              "      <th>publishedDate</th>\n",
              "      <th>category_name</th>\n",
              "      <th>tags</th>\n",
              "      <th>userID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B00TZE87S4</td>\n",
              "      <td>Adult Children of Emotionally Immature Parents...</td>\n",
              "      <td>Lindsay C. Gibson</td>\n",
              "      <td>Amazon.com Services LLC</td>\n",
              "      <td>https://m.media-amazon.com/images/I/713KZTsaYp...</td>\n",
              "      <td>https://www.amazon.com/dp/B00TZE87S4</td>\n",
              "      <td>4.8</td>\n",
              "      <td>0</td>\n",
              "      <td>9.99</td>\n",
              "      <td>False</td>\n",
              "      <td>6</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2015-06-01</td>\n",
              "      <td>Parenting &amp; Relationships</td>\n",
              "      <td>Adult Children of Emotionally Immature Parents...</td>\n",
              "      <td>B00TZE87S4_123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B08WCKY8MB</td>\n",
              "      <td>From Strength to Strength: Finding Success, Ha...</td>\n",
              "      <td>Arthur C. Brooks</td>\n",
              "      <td>Penguin Group (USA) LLC</td>\n",
              "      <td>https://m.media-amazon.com/images/I/A1LZcJFs9E...</td>\n",
              "      <td>https://www.amazon.com/dp/B08WCKY8MB</td>\n",
              "      <td>4.4</td>\n",
              "      <td>0</td>\n",
              "      <td>16.99</td>\n",
              "      <td>False</td>\n",
              "      <td>6</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2022-02-15</td>\n",
              "      <td>Parenting &amp; Relationships</td>\n",
              "      <td>From Strength to Strength: Finding Success, Ha...</td>\n",
              "      <td>B00TZE87S4_456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>B09KPS84CJ</td>\n",
              "      <td>Good Inside: A Guide to Becoming the Parent Yo...</td>\n",
              "      <td>Becky Kennedy</td>\n",
              "      <td>HarperCollins Publishers</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71RIWM0sv6...</td>\n",
              "      <td>https://www.amazon.com/dp/B09KPS84CJ</td>\n",
              "      <td>4.8</td>\n",
              "      <td>0</td>\n",
              "      <td>16.99</td>\n",
              "      <td>False</td>\n",
              "      <td>6</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>2022-09-13</td>\n",
              "      <td>Parenting &amp; Relationships</td>\n",
              "      <td>Good Inside: A Guide to Becoming the Parent Yo...</td>\n",
              "      <td>B00TZE87S4_789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>B07S7QPG6J</td>\n",
              "      <td>Everything I Know About Love: A Memoir</td>\n",
              "      <td>Dolly Alderton</td>\n",
              "      <td>HarperCollins Publishers</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71QdQpTiKZ...</td>\n",
              "      <td>https://www.amazon.com/dp/B07S7QPG6J</td>\n",
              "      <td>4.2</td>\n",
              "      <td>0</td>\n",
              "      <td>9.95</td>\n",
              "      <td>True</td>\n",
              "      <td>6</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>2020-02-25</td>\n",
              "      <td>Parenting &amp; Relationships</td>\n",
              "      <td>Everything I Know About Love: A Memoir</td>\n",
              "      <td>B00TZE87S4_456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>B00N6PEQV0</td>\n",
              "      <td>The Seven Principles for Making Marriage Work:...</td>\n",
              "      <td>John Gottman</td>\n",
              "      <td>Random House LLC</td>\n",
              "      <td>https://m.media-amazon.com/images/I/813o4WOs+w...</td>\n",
              "      <td>https://www.amazon.com/dp/B00N6PEQV0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>0</td>\n",
              "      <td>13.99</td>\n",
              "      <td>False</td>\n",
              "      <td>6</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>Parenting &amp; Relationships</td>\n",
              "      <td>The Seven Principles for Making Marriage Work:...</td>\n",
              "      <td>B00TZE87S4_678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e22b5d6-94a5-4408-a8e2-9f888b138bec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0e22b5d6-94a5-4408-a8e2-9f888b138bec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0e22b5d6-94a5-4408-a8e2-9f888b138bec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-42094df9-fa92-4f8d-a075-040aa23ef98d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42094df9-fa92-4f8d-a075-040aa23ef98d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-42094df9-fa92-4f8d-a075-040aa23ef98d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Display the first few rows of the dataset\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AQnzgxCfqaUN"
      },
      "outputs": [],
      "source": [
        "# Save the updated DataFrame to a new CSV file\n",
        "data.to_csv('updated_dataset.csv', index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "wXFpNsDwqeeS",
        "outputId": "67ce967d-952f-4f5d-a1da-3b84bcc070c2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "asin                  object\n",
              "title                 object\n",
              "author                object\n",
              "soldBy                object\n",
              "imgUrl                object\n",
              "productURL            object\n",
              "stars                float64\n",
              "reviews                int64\n",
              "price                float64\n",
              "isKindleUnlimited       bool\n",
              "category_id            int64\n",
              "isBestSeller            bool\n",
              "isEditorsPick           bool\n",
              "isGoodReadsChoice       bool\n",
              "publishedDate         object\n",
              "category_name         object\n",
              "tags                  object\n",
              "userID                object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>asin</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>author</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>soldBy</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imgUrl</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>productURL</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stars</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isKindleUnlimited</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>category_id</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isBestSeller</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isEditorsPick</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>isGoodReadsChoice</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publishedDate</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>category_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tags</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>userID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "#checking the datatypes of the attributes\n",
        "data.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "DKSaXUVoqiNY",
        "outputId": "41a617a8-8ee9-425b-a3c3-d7e6ebb250bc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               stars        reviews          price    category_id\n",
              "count  133102.000000  133102.000000  133102.000000  133102.000000\n",
              "mean        4.404090     887.375779      15.134127      16.287111\n",
              "std         0.745646    5104.878777      22.254986       8.416924\n",
              "min         0.000000       0.000000       0.000000       1.000000\n",
              "25%         4.400000       0.000000       4.990000       9.000000\n",
              "50%         4.500000       4.000000       9.990000      16.000000\n",
              "75%         4.700000     365.000000      14.990000      23.000000\n",
              "max         5.000000  618227.000000     682.000000      31.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24ebca49-c6fe-4ea9-abd0-379cea8d108d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stars</th>\n",
              "      <th>reviews</th>\n",
              "      <th>price</th>\n",
              "      <th>category_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>133102.000000</td>\n",
              "      <td>133102.000000</td>\n",
              "      <td>133102.000000</td>\n",
              "      <td>133102.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.404090</td>\n",
              "      <td>887.375779</td>\n",
              "      <td>15.134127</td>\n",
              "      <td>16.287111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.745646</td>\n",
              "      <td>5104.878777</td>\n",
              "      <td>22.254986</td>\n",
              "      <td>8.416924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>4.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.990000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.500000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>9.990000</td>\n",
              "      <td>16.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.700000</td>\n",
              "      <td>365.000000</td>\n",
              "      <td>14.990000</td>\n",
              "      <td>23.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>618227.000000</td>\n",
              "      <td>682.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24ebca49-c6fe-4ea9-abd0-379cea8d108d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24ebca49-c6fe-4ea9-abd0-379cea8d108d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24ebca49-c6fe-4ea9-abd0-379cea8d108d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c729e37b-49ee-4055-90c1-a281df258d5d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c729e37b-49ee-4055-90c1-a281df258d5d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c729e37b-49ee-4055-90c1-a281df258d5d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47057.4638915256,\n        \"min\": 0.0,\n        \"max\": 133102.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.404090096317111,\n          4.5,\n          133102.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 216526.45208442246,\n        \"min\": 0.0,\n        \"max\": 618227.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          133102.0,\n          887.3757794773933,\n          365.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47021.401373173336,\n        \"min\": 0.0,\n        \"max\": 133102.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.134127285840933,\n          9.99,\n          133102.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47053.37595013475,\n        \"min\": 1.0,\n        \"max\": 133102.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16.287110636955116,\n          16.0,\n          133102.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "#getting the described info about the dataset\n",
        "data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3fa6u5Xxqopw",
        "outputId": "57f226da-7be7-4f3d-b1cd-7223663076c4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 133102 entries, 0 to 133101\n",
            "Data columns (total 18 columns):\n",
            " #   Column             Non-Null Count   Dtype  \n",
            "---  ------             --------------   -----  \n",
            " 0   asin               133102 non-null  object \n",
            " 1   title              133102 non-null  object \n",
            " 2   author             132677 non-null  object \n",
            " 3   soldBy             123869 non-null  object \n",
            " 4   imgUrl             133102 non-null  object \n",
            " 5   productURL         133102 non-null  object \n",
            " 6   stars              133102 non-null  float64\n",
            " 7   reviews            133102 non-null  int64  \n",
            " 8   price              133102 non-null  float64\n",
            " 9   isKindleUnlimited  133102 non-null  bool   \n",
            " 10  category_id        133102 non-null  int64  \n",
            " 11  isBestSeller       133102 non-null  bool   \n",
            " 12  isEditorsPick      133102 non-null  bool   \n",
            " 13  isGoodReadsChoice  133102 non-null  bool   \n",
            " 14  publishedDate      84086 non-null   object \n",
            " 15  category_name      133102 non-null  object \n",
            " 16  tags               133102 non-null  object \n",
            " 17  userID             133102 non-null  object \n",
            "dtypes: bool(4), float64(2), int64(2), object(10)\n",
            "memory usage: 14.7+ MB\n"
          ]
        }
      ],
      "source": [
        "# Display basic information about the dataset\n",
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2IP7jPRVqrbs",
        "outputId": "c48bb8d5-9c63-4877-c80b-54e5accd4eb2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(133102, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t_gxCjvtqsyN"
      },
      "outputs": [],
      "source": [
        "# Handle missing values without using inplace\n",
        "data['author'] = data['author'].fillna('Unknown')\n",
        "data['soldBy'] = data['soldBy'].fillna('Unknown')\n",
        "data['publishedDate'] = data['publishedDate'].fillna('Unknown')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5DoAaZ3YqxSe",
        "outputId": "99a45a62-a0a5-42a2-f3c3-fb058e845750"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 133102 entries, 0 to 133101\n",
            "Data columns (total 18 columns):\n",
            " #   Column             Non-Null Count   Dtype  \n",
            "---  ------             --------------   -----  \n",
            " 0   asin               133102 non-null  object \n",
            " 1   title              133102 non-null  object \n",
            " 2   author             133102 non-null  object \n",
            " 3   soldBy             133102 non-null  object \n",
            " 4   imgUrl             133102 non-null  object \n",
            " 5   productURL         133102 non-null  object \n",
            " 6   stars              133102 non-null  float64\n",
            " 7   reviews            133102 non-null  int64  \n",
            " 8   price              133102 non-null  float64\n",
            " 9   isKindleUnlimited  133102 non-null  bool   \n",
            " 10  category_id        133102 non-null  int64  \n",
            " 11  isBestSeller       133102 non-null  bool   \n",
            " 12  isEditorsPick      133102 non-null  bool   \n",
            " 13  isGoodReadsChoice  133102 non-null  bool   \n",
            " 14  publishedDate      133102 non-null  object \n",
            " 15  category_name      133102 non-null  object \n",
            " 16  tags               133102 non-null  object \n",
            " 17  userID             133102 non-null  object \n",
            "dtypes: bool(4), float64(2), int64(2), object(10)\n",
            "memory usage: 14.7+ MB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3M1L0pcpqzF0"
      },
      "outputs": [],
      "source": [
        "#Converting the Strings into numerical values\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "le = LabelEncoder()\n",
        "data['soldBy'] = le.fit_transform(data['soldBy'])\n",
        "data['category_name'] = le.fit_transform(data['category_name'])\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wLdz8Zpdq2wu"
      },
      "outputs": [],
      "source": [
        "data['isKindleUnlimited'] = data['isKindleUnlimited'].astype(int)\n",
        "data['isBestSeller'] = data['isBestSeller'].astype(int)\n",
        "data['isEditorsPick'] = data['isEditorsPick'].astype(int)\n",
        "data['isGoodReadsChoice'] = data['isGoodReadsChoice'].astype(int)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "dIFOegKxq6Ks",
        "outputId": "71aa41a2-0f77-4cb3-c255-af3679b9ed95"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         asin                                              title  \\\n",
              "0  B00TZE87S4  Adult Children of Emotionally Immature Parents...   \n",
              "1  B08WCKY8MB  From Strength to Strength: Finding Success, Ha...   \n",
              "2  B09KPS84CJ  Good Inside: A Guide to Becoming the Parent Yo...   \n",
              "3  B07S7QPG6J             Everything I Know About Love: A Memoir   \n",
              "4  B00N6PEQV0  The Seven Principles for Making Marriage Work:...   \n",
              "\n",
              "              author  soldBy  \\\n",
              "0  Lindsay C. Gibson       4   \n",
              "1   Arthur C. Brooks      31   \n",
              "2      Becky Kennedy      20   \n",
              "3     Dolly Alderton      20   \n",
              "4       John Gottman      39   \n",
              "\n",
              "                                              imgUrl  \\\n",
              "0  https://m.media-amazon.com/images/I/713KZTsaYp...   \n",
              "1  https://m.media-amazon.com/images/I/A1LZcJFs9E...   \n",
              "2  https://m.media-amazon.com/images/I/71RIWM0sv6...   \n",
              "3  https://m.media-amazon.com/images/I/71QdQpTiKZ...   \n",
              "4  https://m.media-amazon.com/images/I/813o4WOs+w...   \n",
              "\n",
              "                             productURL  stars  reviews  price  \\\n",
              "0  https://www.amazon.com/dp/B00TZE87S4    4.8        0   9.99   \n",
              "1  https://www.amazon.com/dp/B08WCKY8MB    4.4        0  16.99   \n",
              "2  https://www.amazon.com/dp/B09KPS84CJ    4.8        0  16.99   \n",
              "3  https://www.amazon.com/dp/B07S7QPG6J    4.2        0   9.95   \n",
              "4  https://www.amazon.com/dp/B00N6PEQV0    4.7        0  13.99   \n",
              "\n",
              "   isKindleUnlimited  category_id  isBestSeller  isEditorsPick  \\\n",
              "0                  0            6             1              0   \n",
              "1                  0            6             0              0   \n",
              "2                  0            6             0              1   \n",
              "3                  1            6             0              1   \n",
              "4                  0            6             0              0   \n",
              "\n",
              "   isGoodReadsChoice publishedDate  category_name  \\\n",
              "0                  0    2015-06-01             20   \n",
              "1                  0    2022-02-15             20   \n",
              "2                  0    2022-09-13             20   \n",
              "3                  0    2020-02-25             20   \n",
              "4                  0    2015-05-05             20   \n",
              "\n",
              "                                                tags          userID  \n",
              "0  Adult Children of Emotionally Immature Parents...  B00TZE87S4_123  \n",
              "1  From Strength to Strength: Finding Success, Ha...  B00TZE87S4_456  \n",
              "2  Good Inside: A Guide to Becoming the Parent Yo...  B00TZE87S4_789  \n",
              "3             Everything I Know About Love: A Memoir  B00TZE87S4_456  \n",
              "4  The Seven Principles for Making Marriage Work:...  B00TZE87S4_678  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65fee7cb-158a-4b7c-93eb-2dc729328b9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>asin</th>\n",
              "      <th>title</th>\n",
              "      <th>author</th>\n",
              "      <th>soldBy</th>\n",
              "      <th>imgUrl</th>\n",
              "      <th>productURL</th>\n",
              "      <th>stars</th>\n",
              "      <th>reviews</th>\n",
              "      <th>price</th>\n",
              "      <th>isKindleUnlimited</th>\n",
              "      <th>category_id</th>\n",
              "      <th>isBestSeller</th>\n",
              "      <th>isEditorsPick</th>\n",
              "      <th>isGoodReadsChoice</th>\n",
              "      <th>publishedDate</th>\n",
              "      <th>category_name</th>\n",
              "      <th>tags</th>\n",
              "      <th>userID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B00TZE87S4</td>\n",
              "      <td>Adult Children of Emotionally Immature Parents...</td>\n",
              "      <td>Lindsay C. Gibson</td>\n",
              "      <td>4</td>\n",
              "      <td>https://m.media-amazon.com/images/I/713KZTsaYp...</td>\n",
              "      <td>https://www.amazon.com/dp/B00TZE87S4</td>\n",
              "      <td>4.8</td>\n",
              "      <td>0</td>\n",
              "      <td>9.99</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2015-06-01</td>\n",
              "      <td>20</td>\n",
              "      <td>Adult Children of Emotionally Immature Parents...</td>\n",
              "      <td>B00TZE87S4_123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B08WCKY8MB</td>\n",
              "      <td>From Strength to Strength: Finding Success, Ha...</td>\n",
              "      <td>Arthur C. Brooks</td>\n",
              "      <td>31</td>\n",
              "      <td>https://m.media-amazon.com/images/I/A1LZcJFs9E...</td>\n",
              "      <td>https://www.amazon.com/dp/B08WCKY8MB</td>\n",
              "      <td>4.4</td>\n",
              "      <td>0</td>\n",
              "      <td>16.99</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2022-02-15</td>\n",
              "      <td>20</td>\n",
              "      <td>From Strength to Strength: Finding Success, Ha...</td>\n",
              "      <td>B00TZE87S4_456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>B09KPS84CJ</td>\n",
              "      <td>Good Inside: A Guide to Becoming the Parent Yo...</td>\n",
              "      <td>Becky Kennedy</td>\n",
              "      <td>20</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71RIWM0sv6...</td>\n",
              "      <td>https://www.amazon.com/dp/B09KPS84CJ</td>\n",
              "      <td>4.8</td>\n",
              "      <td>0</td>\n",
              "      <td>16.99</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2022-09-13</td>\n",
              "      <td>20</td>\n",
              "      <td>Good Inside: A Guide to Becoming the Parent Yo...</td>\n",
              "      <td>B00TZE87S4_789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>B07S7QPG6J</td>\n",
              "      <td>Everything I Know About Love: A Memoir</td>\n",
              "      <td>Dolly Alderton</td>\n",
              "      <td>20</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71QdQpTiKZ...</td>\n",
              "      <td>https://www.amazon.com/dp/B07S7QPG6J</td>\n",
              "      <td>4.2</td>\n",
              "      <td>0</td>\n",
              "      <td>9.95</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2020-02-25</td>\n",
              "      <td>20</td>\n",
              "      <td>Everything I Know About Love: A Memoir</td>\n",
              "      <td>B00TZE87S4_456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>B00N6PEQV0</td>\n",
              "      <td>The Seven Principles for Making Marriage Work:...</td>\n",
              "      <td>John Gottman</td>\n",
              "      <td>39</td>\n",
              "      <td>https://m.media-amazon.com/images/I/813o4WOs+w...</td>\n",
              "      <td>https://www.amazon.com/dp/B00N6PEQV0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>0</td>\n",
              "      <td>13.99</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>20</td>\n",
              "      <td>The Seven Principles for Making Marriage Work:...</td>\n",
              "      <td>B00TZE87S4_678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65fee7cb-158a-4b7c-93eb-2dc729328b9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-65fee7cb-158a-4b7c-93eb-2dc729328b9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-65fee7cb-158a-4b7c-93eb-2dc729328b9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4c77592c-e766-4d9d-ba52-db1eae05ff3c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c77592c-e766-4d9d-ba52-db1eae05ff3c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4c77592c-e766-4d9d-ba52-db1eae05ff3c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "data.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cmUM4ya-q9Tv",
        "outputId": "1eb06db4-6c25-44a7-f7d1-ab642639cf70"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "asin 0.0\n",
            "title 0.0\n",
            "author 0.0\n",
            "soldBy 0.0\n",
            "imgUrl 0.0\n",
            "productURL 0.0\n",
            "stars 0.0\n",
            "reviews 0.0\n",
            "price 0.0\n",
            "isKindleUnlimited 0.0\n",
            "category_id 0.0\n",
            "isBestSeller 0.0\n",
            "isEditorsPick 0.0\n",
            "isGoodReadsChoice 0.0\n",
            "publishedDate 0.0\n",
            "category_name 0.0\n",
            "tags 0.0\n",
            "userID 0.0\n"
          ]
        }
      ],
      "source": [
        "# Removing null values\n",
        "for columnName in data:\n",
        "  tot = data[columnName].isnull().sum()\n",
        "  percentatge = (tot/len(data.index))\n",
        "  print(columnName, percentatge)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2fdRyL2vrANd",
        "outputId": "44aca564-6c82-44cf-8839-1fbbd45eabac"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Data Visualization\n",
        "\n",
        "import seaborn as sns\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data['price'], bins=30, kde=True)\n",
        "plt.title('Price Distribution of Books')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(x='stars', data=data)\n",
        "plt.title('Distribution of Book Ratings')\n",
        "plt.xlabel('Stars')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(x='category_name', data=data)\n",
        "plt.title('Distribution of Book Ratings')\n",
        "plt.xlabel('Stars')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(data.isnull(), cbar=False, cmap='viridis')\n",
        "plt.title('Missing Values in Dataset')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "-n1IXgGdrM8l",
        "outputId": "1f3c3f66-017a-4b7e-ca0a-8e32ab70bfb7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Is kindle limited')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "isKindle_Unlimited=data['isKindleUnlimited'].value_counts().head(5)\n",
        "isKindle_Unlimited.plot(kind= 'bar',color='red')\n",
        "plt.title(\"Is kindle limited\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "hZuJIBoBrRBn",
        "outputId": "155a0d47-b88a-4f77-f177-bf9d58afbdea"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Is GoodReads Choice')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "isKindle_Unlimited=data['isGoodReadsChoice'].value_counts().head(5)\n",
        "isKindle_Unlimited.plot(kind= 'bar',color='red')\n",
        "plt.title(\"Is GoodReads Choice\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M_9H2CHzrVfR"
      },
      "outputs": [],
      "source": [
        "import spacy\n",
        "from spacy.lang.en.stop_words import STOP_WORDS\n",
        "import pandas as pd\n",
        "\n",
        "# Load the spacy model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "def clean_and_extract_titles(text):\n",
        "    doc = nlp(text.lower())\n",
        "    title = [token.text for token in doc if token.is_alpha and token.text not in STOP_WORDS]\n",
        "    return ','.join(title)\n",
        "\n",
        "columns_to_extract_titles_from = ['tags']\n",
        "\n",
        "for column in columns_to_extract_titles_from:\n",
        "    data[column] = data[column].apply(clean_and_extract_titles)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Fj9i8e-EwbD4",
        "outputId": "4b241463-2c72-4853-b936-7cd4b966f313"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rating based recommendations:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    title  reviews  \\\n",
              "17137   CBT for Social Anxiety: Simple Skills for Over...        0   \n",
              "112023  The Pancreas: An Integrated Textbook of Basic ...        0   \n",
              "55095                                           Jura Wine        1   \n",
              "14146   Black Knights and Fighting Irish: A Rivalry, a...        0   \n",
              "55100       Jurisprudence: Realism in Theory and Practice        0   \n",
              "27467   Demystifying Ansible Automation Platform: A de...        9   \n",
              "89228   Some Kind of Girl: An African Girl Looking for...        3   \n",
              "5858    Adult-Gerontology Acute Care Nurse Practitione...        0   \n",
              "27466   Demystifying Academic Writing: Genres, Moves, ...        9   \n",
              "55131   Just CrossStitch - Christmas Ornaments 2023 - ...        0   \n",
              "55138   Just Do Nothing: A Paradoxical Guide to Gettin...        2   \n",
              "14156   Black Letter Outline on Federal Courts (Black ...        0   \n",
              "14157   Black Letter Outline on Federal Wealth Transfe...        0   \n",
              "89184   Solutions For Anti-Black Misandry, Flat Blackn...        2   \n",
              "55165            Just Kill Yourself: My Journey With PTSD        2   \n",
              "5835    Adult CCRN Exam Premium: For the Latest Exam B...        0   \n",
              "128256  What Kobe Left Behind: The Playbook from an Ex...       52   \n",
              "27409   Democratizing RPA with Power Automate Desktop:...       12   \n",
              "128269  What Makes Great Products Great? A Product Man...        0   \n",
              "89131   SolidWorks 2023 - Step-By-Step Guide: Part, As...        0   \n",
              "\n",
              "                                                   imgUrl  stars  \n",
              "17137   https://m.media-amazon.com/images/I/61ZQ7S9X3a...    5.0  \n",
              "112023  https://m.media-amazon.com/images/I/61H0R8FCN9...    5.0  \n",
              "55095   https://m.media-amazon.com/images/I/81t6R6llDu...    5.0  \n",
              "14146   https://m.media-amazon.com/images/I/810lNN7reO...    5.0  \n",
              "55100   https://m.media-amazon.com/images/I/81OARn43sl...    5.0  \n",
              "27467   https://m.media-amazon.com/images/I/81TNK7eD2S...    5.0  \n",
              "89228   https://m.media-amazon.com/images/I/71UP4ax0Kq...    5.0  \n",
              "5858    https://m.media-amazon.com/images/I/815qWv89wL...    5.0  \n",
              "27466   https://m.media-amazon.com/images/I/71-U5OsM7Y...    5.0  \n",
              "55131   https://m.media-amazon.com/images/I/A1gTu2tX++...    5.0  \n",
              "55138   https://m.media-amazon.com/images/I/713Z63shAP...    5.0  \n",
              "14156   https://m.media-amazon.com/images/I/81ujQtHvqy...    5.0  \n",
              "14157   https://m.media-amazon.com/images/I/81+h3uuali...    5.0  \n",
              "89184   https://m.media-amazon.com/images/I/71CmqsiTNW...    5.0  \n",
              "55165   https://m.media-amazon.com/images/I/713krKO29-...    5.0  \n",
              "5835    https://m.media-amazon.com/images/I/71u0ljiClX...    5.0  \n",
              "128256  https://m.media-amazon.com/images/I/61d7nDZcSl...    5.0  \n",
              "27409   https://m.media-amazon.com/images/I/51SlCgzarD...    5.0  \n",
              "128269  https://m.media-amazon.com/images/I/61sYukZksq...    5.0  \n",
              "89131   https://m.media-amazon.com/images/I/61j4Zv6493...    5.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a993d59e-a610-44ae-8dd9-c9613cd79cf4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>reviews</th>\n",
              "      <th>imgUrl</th>\n",
              "      <th>stars</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17137</th>\n",
              "      <td>CBT for Social Anxiety: Simple Skills for Over...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/61ZQ7S9X3a...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112023</th>\n",
              "      <td>The Pancreas: An Integrated Textbook of Basic ...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/61H0R8FCN9...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55095</th>\n",
              "      <td>Jura Wine</td>\n",
              "      <td>1</td>\n",
              "      <td>https://m.media-amazon.com/images/I/81t6R6llDu...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14146</th>\n",
              "      <td>Black Knights and Fighting Irish: A Rivalry, a...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/810lNN7reO...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55100</th>\n",
              "      <td>Jurisprudence: Realism in Theory and Practice</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/81OARn43sl...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27467</th>\n",
              "      <td>Demystifying Ansible Automation Platform: A de...</td>\n",
              "      <td>9</td>\n",
              "      <td>https://m.media-amazon.com/images/I/81TNK7eD2S...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89228</th>\n",
              "      <td>Some Kind of Girl: An African Girl Looking for...</td>\n",
              "      <td>3</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71UP4ax0Kq...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5858</th>\n",
              "      <td>Adult-Gerontology Acute Care Nurse Practitione...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/815qWv89wL...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27466</th>\n",
              "      <td>Demystifying Academic Writing: Genres, Moves, ...</td>\n",
              "      <td>9</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71-U5OsM7Y...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55131</th>\n",
              "      <td>Just CrossStitch - Christmas Ornaments 2023 - ...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/A1gTu2tX++...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55138</th>\n",
              "      <td>Just Do Nothing: A Paradoxical Guide to Gettin...</td>\n",
              "      <td>2</td>\n",
              "      <td>https://m.media-amazon.com/images/I/713Z63shAP...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14156</th>\n",
              "      <td>Black Letter Outline on Federal Courts (Black ...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/81ujQtHvqy...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14157</th>\n",
              "      <td>Black Letter Outline on Federal Wealth Transfe...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/81+h3uuali...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89184</th>\n",
              "      <td>Solutions For Anti-Black Misandry, Flat Blackn...</td>\n",
              "      <td>2</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71CmqsiTNW...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55165</th>\n",
              "      <td>Just Kill Yourself: My Journey With PTSD</td>\n",
              "      <td>2</td>\n",
              "      <td>https://m.media-amazon.com/images/I/713krKO29-...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5835</th>\n",
              "      <td>Adult CCRN Exam Premium: For the Latest Exam B...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/71u0ljiClX...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128256</th>\n",
              "      <td>What Kobe Left Behind: The Playbook from an Ex...</td>\n",
              "      <td>52</td>\n",
              "      <td>https://m.media-amazon.com/images/I/61d7nDZcSl...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27409</th>\n",
              "      <td>Democratizing RPA with Power Automate Desktop:...</td>\n",
              "      <td>12</td>\n",
              "      <td>https://m.media-amazon.com/images/I/51SlCgzarD...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128269</th>\n",
              "      <td>What Makes Great Products Great? A Product Man...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/61sYukZksq...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89131</th>\n",
              "      <td>SolidWorks 2023 - Step-By-Step Guide: Part, As...</td>\n",
              "      <td>0</td>\n",
              "      <td>https://m.media-amazon.com/images/I/61j4Zv6493...</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a993d59e-a610-44ae-8dd9-c9613cd79cf4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a993d59e-a610-44ae-8dd9-c9613cd79cf4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a993d59e-a610-44ae-8dd9-c9613cd79cf4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a305c414-08ba-40be-a47a-99fe53237776\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a305c414-08ba-40be-a47a-99fe53237776')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a305c414-08ba-40be-a47a-99fe53237776 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8caeeb11-51cb-4a1e-8a92-0b51aeb6f460\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rating_based_recommendation')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8caeeb11-51cb-4a1e-8a92-0b51aeb6f460 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rating_based_recommendation');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rating_based_recommendation",
              "summary": "{\n  \"name\": \"rating_based_recommendation\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"CBT for Social Anxiety: Simple Skills for Overcoming Fear and Enjoying People\",\n          \"Democratizing RPA with Power Automate Desktop: Boost your productivity by implementing best practices for automating repetitive desktop processes\",\n          \"Adult CCRN Exam Premium: For the Latest Exam Blueprint, Includes 3 Practice Tests, Comprehensive Review, and Online Study Prep (Barron's Test Prep)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 52,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"imgUrl\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"https://m.media-amazon.com/images/I/61ZQ7S9X3aL._AC_UY218_.jpg\",\n          \"https://m.media-amazon.com/images/I/51SlCgzarDL._AC_UY218_.jpg\",\n          \"https://m.media-amazon.com/images/I/71u0ljiClXL._AC_UY218_.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stars\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "#RATING BASE RECOMMENDATION SYSTEM\n",
        "avg_ratings= data.groupby(['title','reviews','imgUrl',])['stars'].mean().reset_index()\n",
        "top_rated_books= avg_ratings.sort_values(by='stars',ascending=False)\n",
        "rating_based_recommendation=top_rated_books.head(20)\n",
        "rating_based_recommendation.loc[:, 'stars'] = rating_based_recommendation['stars'].astype(int)\n",
        "rating_based_recommendation.loc[:, 'reviews'] = rating_based_recommendation['reviews'].astype(int)\n",
        "rating_based_recommendation\n",
        "print(\"Rating based recommendations:\")\n",
        "\n",
        "# Use .loc to avoid SettingWithCopyWarning\n",
        "rating_based_recommendation.loc[:, ['title', 'reviews', 'imgUrl']] = rating_based_recommendation[['title', 'reviews', 'imgUrl']]\n",
        "\n",
        "# Display the DataFrame\n",
        "rating_based_recommendation\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ntWvPx46wfuu",
        "outputId": "19852eb7-b2ba-40b9-ff43-1c834ed68ab3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommended Items:\n",
            "                                               title               author  \\\n",
            "0  Decolonizing Methodologies: Research and Indig...  Linda Tuhiwai Smith   \n",
            "1  Breverton's Phantasmagoria: A Compendium of Mo...      Terry Breverton   \n",
            "2  Wealth Supremacy: How the Extractive Economy a...       Marjorie Kelly   \n",
            "3  Swimming in the Sacred: Wisdom from the Psyche...        Rachel Harris   \n",
            "4                                        On Bullshit   Harry G. Frankfurt   \n",
            "5  Wilmington's Lie: The Murderous Coup of 1898 a...       David Zucchino   \n",
            "6  Advanced Social Psychology: The State of the S...        Eli J. Finkel   \n",
            "7  The Long Game: China's Grand Strategy to Displ...           Rush Doshi   \n",
            "8  The Art of Living: The Classical Mannual on Vi...            Epictetus   \n",
            "9  THINK STRAIGHT: Change Your Thoughts, Change Y...        Darius Foroux   \n",
            "\n",
            "                                              imgUrl  stars  reviews  \\\n",
            "0  https://m.media-amazon.com/images/I/91me-RIEWD...    4.8      173   \n",
            "1  https://m.media-amazon.com/images/I/91Bn0J2Sj6...    4.7      992   \n",
            "2  https://m.media-amazon.com/images/I/712fKp5SsV...    5.0        6   \n",
            "3  https://m.media-amazon.com/images/I/8130xja3+H...    4.3       18   \n",
            "4  https://m.media-amazon.com/images/I/5140fh0v0Y...    4.3     2222   \n",
            "5  https://m.media-amazon.com/images/I/81AnmbVl+A...    4.7     2235   \n",
            "6  https://m.media-amazon.com/images/I/71FsavEJny...    4.9       48   \n",
            "7  https://m.media-amazon.com/images/I/91FGbdxpPa...    4.5      438   \n",
            "8  https://m.media-amazon.com/images/I/71XX4wzJK0...    4.7     2633   \n",
            "9  https://m.media-amazon.com/images/I/71v0Ccq5ao...    4.2    11345   \n",
            "\n",
            "                                                tags  Cosine Similarity  \n",
            "0  decolonizing,methodologies,research,indigenous...                0.0  \n",
            "1  breverton,phantasmagoria,compendium,monsters,m...                0.0  \n",
            "2  wealth,supremacy,extractive,economy,biased,rul...                0.0  \n",
            "3     swimming,sacred,wisdom,psychedelic,underground                0.0  \n",
            "4                                           bullshit                0.0  \n",
            "5  wilmington,lie,murderous,coup,rise,white,supre...                0.0  \n",
            "6           advanced,social,psychology,state,science                0.0  \n",
            "7  long,game,china,grand,strategy,displace,americ...                0.0  \n",
            "8  art,living,classical,mannual,virtue,happiness,...                0.0  \n",
            "9         think,straight,change,thoughts,change,life                0.0  \n",
            "Recommended Items:\n",
            "'Good Inside' not found in the dataset.\n"
          ]
        }
      ],
      "source": [
        "#CONTENT BASED RECOMENDATION SYSTEM\n",
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "# Step 1: Create a TF-IDF Vectorizer\n",
        "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
        "\n",
        "# Step 2: Fit and transform the tags into a sparse matrix\n",
        "tfidf_matrix_content = tfidf_vectorizer.fit_transform(data['tags'])\n",
        "\n",
        "# Function to find index of a book by title\n",
        "def get_book_index(book_title):\n",
        "    if book_title in data['title'].values:\n",
        "        return data[data['title'] == book_title].index[0]\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Optional: Function to get similar items based on cosine similarity\n",
        "def get_recommendations_by_title(book_title, num_recommendations=5):\n",
        "    index = get_book_index(book_title)\n",
        "\n",
        "    if index is None:\n",
        "        return f\"'{book_title}' not found in the dataset.\"\n",
        "\n",
        "    # Calculate cosine similarities for the specific item only\n",
        "    sim_scores = cosine_similarity(tfidf_matrix_content[index], tfidf_matrix_content).flatten()\n",
        "\n",
        "    # Get the indices of the most similar items\n",
        "    sim_indices = sim_scores.argsort()[-num_recommendations-1:-1][::-1]\n",
        "\n",
        "    # Get the similarity scores for the recommended items\n",
        "    scores = sim_scores[sim_indices]\n",
        "\n",
        "    # Create a DataFrame with recommendations and their corresponding similarity scores\n",
        "    recommendations = pd.DataFrame({\n",
        "        'title': data.iloc[sim_indices]['title'].values,\n",
        "        'author': data.iloc[sim_indices]['author'].values,\n",
        "        'imgUrl': data.iloc[sim_indices]['imgUrl'].values,\n",
        "        'stars': data.iloc[sim_indices]['stars'].values,\n",
        "        'reviews': data.iloc[sim_indices]['reviews'].values,\n",
        "        'tags': data.iloc[sim_indices]['tags'].values,\n",
        "        'Cosine Similarity': scores\n",
        "    })\n",
        "\n",
        "    return recommendations\n",
        "# Example usage: Get recommendations by book title\n",
        "recommended_items = get_recommendations_by_title(\"HER\", num_recommendations=10)\n",
        "print(\"Recommended Items:\")\n",
        "print(recommended_items)\n",
        "# Example usage: Get recommendations by book title\n",
        "recommended_items = get_recommendations_by_title(\"Good Inside\", num_recommendations=5)\n",
        "print(\"Recommended Items:\")\n",
        "print(recommended_items)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gswm5RwbwlJa",
        "outputId": "0b4d356a-5fe1-413e-d2d9-2742b99c5eba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(14, 133102)\n",
            "<class 'scipy.sparse._csr.csr_matrix'>\n",
            "Recommendations for users who liked 'HER':\n",
            "              asin                                              title  \\\n",
            "4066    B06XP2P7Z1  Cómo criar niños felices (Fuera de colección) ...   \n",
            "7854    B06XPRY7CF  Black & Decker The Complete Guide to DIY Green...   \n",
            "11491   B06XP3GJ7F  The Manager's Path: A Guide for Tech Leaders N...   \n",
            "12341   B06XP9Z5TS  A Brief History of Everyone Who Ever Lived: Th...   \n",
            "26066   B06XPBD6TR  The Backyard Homestead Seasonal Planner: What ...   \n",
            "53909   B06XP3Z2PL  Los amantes de Praga (Planeta Internacional) (...   \n",
            "95318   B06XP6MYY6                                                HER   \n",
            "95475   B0CK5JFN6B                                Almost True Stories   \n",
            "96600   B06XP2B5QC  Habit Stacking: 127 Small Changes to Improve Y...   \n",
            "129786  B06XPCP988  Snoopy: What's Wrong with Dog Lips?: A PEANUTS...   \n",
            "\n",
            "                               author  \\\n",
            "4066         Jessica Joelle Alexander   \n",
            "7854    Editors of Cool Springs Press   \n",
            "11491                Camille Fournier   \n",
            "12341             Adam Rutherford PhD   \n",
            "26066               Ann Larkin Hansen   \n",
            "53909                  Alyson Richman   \n",
            "95318              Pierre Alex Jeanty   \n",
            "95475                   Tommy Bodford   \n",
            "96600                      S.J. Scott   \n",
            "129786                        Unknown   \n",
            "\n",
            "                                                   imgUrl  stars  reviews  \n",
            "4066    https://m.media-amazon.com/images/I/81gCnsYBWt...    4.6        0  \n",
            "7854    https://m.media-amazon.com/images/I/A1RHlnd7tB...    4.5        0  \n",
            "11491   https://m.media-amazon.com/images/I/81QhP+Pg-N...    4.6        0  \n",
            "12341   https://m.media-amazon.com/images/I/81FCuF5oiF...    4.4        0  \n",
            "26066   https://m.media-amazon.com/images/I/A1xkYPxL5-...    4.6        0  \n",
            "53909   https://m.media-amazon.com/images/I/81KQzvxGHC...    4.6     3161  \n",
            "95318   https://m.media-amazon.com/images/I/61lg3mcFwE...    4.7    24887  \n",
            "95475   https://m.media-amazon.com/images/I/81BXi7FnMv...    0.0        0  \n",
            "96600   https://m.media-amazon.com/images/I/81JNt-K64m...    4.2     1068  \n",
            "129786  https://m.media-amazon.com/images/I/81CReV4YZS...    4.9        0  \n"
          ]
        }
      ],
      "source": [
        "#COLLABERATIVE FILTERING(USER ITEM SIMILARITY)\n",
        "\n",
        "from scipy.sparse import csr_matrix\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "\n",
        "# Convert userID and asin columns to categorical\n",
        "data['userID'] = data['userID'].astype('category')\n",
        "data['asin'] = data['asin'].astype('category')\n",
        "\n",
        "# Create a mapping from userID and asin to integer indices\n",
        "user_ids = data['userID'].cat.codes\n",
        "item_ids = data['asin'].cat.codes\n",
        "\n",
        "# Create the sparse matrix\n",
        "sparse_matrix = csr_matrix((data['stars'], (user_ids, item_ids)), shape=(data['userID'].nunique(), data['asin'].nunique()))\n",
        "\n",
        "# Check the shape and type of the sparse matrix\n",
        "print(sparse_matrix.shape)\n",
        "print(type(sparse_matrix))\n",
        "\n",
        "# Initialize the NearestNeighbors model\n",
        "nn_model = NearestNeighbors(metric='cosine', algorithm='brute')\n",
        "\n",
        "# Fit the model on the sparse matrix\n",
        "nn_model.fit(sparse_matrix)\n",
        "\n",
        "# Function to get top N similar users\n",
        "def get_similar_users(user_index, n_neighbors=5):\n",
        "    distances, indices = nn_model.kneighbors(sparse_matrix[user_index], n_neighbors=n_neighbors)\n",
        "    return distances, indices\n",
        "\n",
        "# Function to recommend items based on book title\n",
        "def recommend_items_by_title(book_title, sparse_matrix, data, n_neighbors=5, n_recommendations=10):\n",
        "    try:\n",
        "        # Find the internal item index for the given book title\n",
        "        item_index = data[data['title'] == book_title].iloc[0].asin\n",
        "        item_index = data['asin'].cat.codes[data[data['asin'] == item_index].index[0]]\n",
        "\n",
        "        # Get users who have rated this item\n",
        "        user_indices = sparse_matrix[:, item_index].nonzero()[0]\n",
        "\n",
        "        # If no users have rated the book, return an empty DataFrame\n",
        "        if len(user_indices) == 0:\n",
        "            print(f\"No users have rated the book '{book_title}'.\")\n",
        "            return pd.DataFrame(columns=['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews'])\n",
        "\n",
        "        # Collect all ratings of users who have rated the given book\n",
        "        weighted_ratings = np.zeros(sparse_matrix.shape[1])\n",
        "        for user_index in user_indices:\n",
        "            distances, indices = get_similar_users(user_index, n_neighbors=n_neighbors)\n",
        "            for i, other_user_index in enumerate(indices.flatten()):\n",
        "                if other_user_index == user_index:\n",
        "                    continue\n",
        "                weighted_ratings += sparse_matrix[other_user_index].toarray().flatten() * (1 - distances.flatten()[i])\n",
        "\n",
        "        # Exclude the book itself and books already rated by the user\n",
        "        for user_index in user_indices:\n",
        "            user_ratings = sparse_matrix[user_index].toarray().flatten()\n",
        "            weighted_ratings[user_ratings > 0] = 0\n",
        "\n",
        "        # Get the top N recommendations\n",
        "        recommendations_indices = weighted_ratings.argsort()[-n_recommendations:][::-1]\n",
        "        recommendations = data['asin'].cat.categories[recommendations_indices]\n",
        "\n",
        "        # Get the details of the recommended items\n",
        "        recommended_items = data[data['asin'].isin(recommendations)].drop_duplicates('asin')\n",
        "\n",
        "        # Select the relevant columns\n",
        "        recommended_details = recommended_items[['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews']]\n",
        "\n",
        "        return recommended_details\n",
        "    except IndexError:\n",
        "        print(f\"Book title '{book_title}' not found in the dataset.\")\n",
        "        return pd.DataFrame(columns=['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews'])\n",
        "\n",
        "# Get recommendations based on a specific book title\n",
        "book_title = 'HER'  # Example book title, change as needed\n",
        "recommendations_with_details = recommend_items_by_title(book_title, sparse_matrix, data, n_neighbors=5, n_recommendations=10)\n",
        "\n",
        "# Print recommendations with details\n",
        "print(f\"Recommendations for users who liked '{book_title}':\")\n",
        "print(recommendations_with_details)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6AnaYffQwqHW",
        "outputId": "7bdbc5e8-1455-4ba3-d0d2-168cebab7153"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hybrid Recommendations for users who liked 'HER':\n",
            "             asin                                              title  \\\n",
            "8      B098PXH8CK  Unmasking Autism: Discovering the New Faces of...   \n",
            "88253  B01BT0KL0S  Habitudes for the Journey: The Art of Navigati...   \n",
            "88463  B08QRR36RG  Business: Its Legal, Ethical, and Global Envir...   \n",
            "88448  B0B1P8ZWJ9     TOEIC (with online audio) (Barron's Test Prep)   \n",
            "88433  B06XC7K84K  Softening the Edges: Assessment Practices That...   \n",
            "88418  B0B64BPMF7  The British Empire: A Captivating Guide to the...   \n",
            "88403  B09H61PN83  Co-Planning: Five Essential Practices to Integ...   \n",
            "88388  B07BSSZBMT  Materials Science - Book 5: 250+ Questions & A...   \n",
            "88373  B0CJR4BJPB  Quantum Mechanics Demystified: Mastering the Q...   \n",
            "88358  B078KMG2D1            The American System of Criminal Justice   \n",
            "\n",
            "                     author  \\\n",
            "8               Devon Price   \n",
            "88253        Dr. Tim Elmore   \n",
            "88463  Marianne M. Jennings   \n",
            "88448          Lin Lougheed   \n",
            "88433           Katie White   \n",
            "88418   Captivating History   \n",
            "88403     Andrea Honigsfeld   \n",
            "88388        David Theodore   \n",
            "88373         Saviour Gbenu   \n",
            "88358        George F. Cole   \n",
            "\n",
            "                                                  imgUrl  stars  reviews  \\\n",
            "8      https://m.media-amazon.com/images/I/81aqifI4AZ...    4.7        0   \n",
            "88253  https://m.media-amazon.com/images/I/91t9rYKFUJ...    4.3       83   \n",
            "88463  https://m.media-amazon.com/images/I/81TIrpTgPT...    4.6       29   \n",
            "88448  https://m.media-amazon.com/images/I/01RmK+J4pJ...    4.4      133   \n",
            "88433  https://m.media-amazon.com/images/I/718Wnfg5PE...    4.2       31   \n",
            "88418  https://m.media-amazon.com/images/I/81jbsOT34c...    4.2      214   \n",
            "88403  https://m.media-amazon.com/images/I/81J0eiVVtr...    4.8       24   \n",
            "88388  https://m.media-amazon.com/images/I/71zYJ2nuS4...    4.7       98   \n",
            "88373  https://m.media-amazon.com/images/I/71gbRyntn9...    1.0        1   \n",
            "88358  https://m.media-amazon.com/images/I/914FfRQZS4...    4.5      175   \n",
            "\n",
            "                                                    tags  Cosine Similarity  \n",
            "8      unmasking,autism,discovering,new,faces,neurodi...                0.0  \n",
            "88253       habitudes,journey,art,navigating,transitions                0.0  \n",
            "88463  business,legal,ethical,global,environment,mind...                0.0  \n",
            "88448                toeic,online,audio,barron,test,prep                0.0  \n",
            "88433  softening,edges,assessment,practices,honor,tea...                0.0  \n",
            "88418  british,empire,captivating,guide,largest,empir...                0.0  \n",
            "88403  co,planning,essential,practices,integrate,curr...                0.0  \n",
            "88388           materials,science,book,questions,answers                0.0  \n",
            "88373  quantum,mechanics,demystified,mastering,quantu...                0.0  \n",
            "88358                   american,system,criminal,justice                0.0  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-5450f9b5dc14>:44: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  recommended_details['Cosine Similarity'] = recommended_details.apply(\n"
          ]
        }
      ],
      "source": [
        "# HYBRID RECOMMENDATION SYSTEM\n",
        "\n",
        "# Function to recommend items based on book title using both collaborative and content-based filtering\n",
        "def recommend_items_hybrid(book_title, data, sparse_matrix, tfidf_matrix_content, n_neighbors=5, n_recommendations=10):\n",
        "    try:\n",
        "        # Find the internal item index for the given book title\n",
        "        item_index = data[data['title'] == book_title].iloc[0]['asin']\n",
        "        item_index = data['asin'].cat.codes[data[data['asin'] == item_index].index[0]]\n",
        "\n",
        "        # Get users who have rated this item\n",
        "        user_indices = sparse_matrix[:, item_index].nonzero()[0]\n",
        "\n",
        "        # If no users have rated the book, return an empty DataFrame\n",
        "        if len(user_indices) == 0:\n",
        "            print(f\"No users have rated the book '{book_title}'.\")\n",
        "            return pd.DataFrame(columns=['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews'])\n",
        "\n",
        "        # Collect all books read by users who have read the given book\n",
        "        recommended_books = []\n",
        "        for user_index in user_indices:\n",
        "            user_books = sparse_matrix[user_index].nonzero()[1]\n",
        "            recommended_books.extend(user_books)\n",
        "\n",
        "        # Exclude the book itself\n",
        "        recommended_books = list(set(recommended_books) - {item_index})\n",
        "\n",
        "        # Get the details of the recommended items\n",
        "        recommendations = data['asin'].cat.categories[recommended_books]\n",
        "        recommended_items = data[data['asin'].isin(recommendations)].drop_duplicates('asin')\n",
        "\n",
        "        # Select the relevant columns for content-based filtering\n",
        "        recommended_details = recommended_items[['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews', 'tags']]\n",
        "\n",
        "        # Get the index of the input book for content-based filtering\n",
        "        index = get_book_index(book_title)\n",
        "\n",
        "        if index is None:\n",
        "            return f\"'{book_title}' not found in the dataset.\"\n",
        "\n",
        "        # Calculate cosine similarities for the input book\n",
        "        sim_scores = cosine_similarity(tfidf_matrix_content[index], tfidf_matrix_content).flatten()\n",
        "\n",
        "        # Filter recommendations by cosine similarity\n",
        "        recommended_details['Cosine Similarity'] = recommended_details.apply(\n",
        "            lambda row: sim_scores[get_book_index(row['title'])], axis=1)\n",
        "\n",
        "        # Sort recommendations by cosine similarity\n",
        "        recommended_details = recommended_details.sort_values(by='Cosine Similarity', ascending=False)\n",
        "\n",
        "        # Return the top N recommendations\n",
        "        return recommended_details.head(n_recommendations)\n",
        "    except IndexError:\n",
        "        print(f\"Book title '{book_title}' not found in the dataset.\")\n",
        "        return pd.DataFrame(columns=['asin', 'title', 'author', 'imgUrl', 'stars', 'reviews', 'tags'])\n",
        "\n",
        "# Example usage: Get recommendations based on a specific book title\n",
        "book_title = 'HER'  # Example book title, change as needed\n",
        "recommendations_hybrid = recommend_items_hybrid(book_title, data, sparse_matrix, tfidf_matrix_content, n_neighbors=5, n_recommendations=10)\n",
        "\n",
        "# Print recommendations with details\n",
        "print(f\"Hybrid Recommendations for users who liked '{book_title}':\")\n",
        "print(recommendations_hybrid)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split data into training and test sets\n",
        "train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "2dQiQ_I1fAnz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "# Predict average ratings on the test set\n",
        "test_data['predicted_rating'] = test_data['title'].apply(\n",
        "    lambda x: top_rated_books[top_rated_books['title'] == x]['stars'].values[0]\n",
        "    if x in top_rated_books['title'].values else data['stars'].mean()\n",
        ")\n",
        "\n",
        "# Calculate MAE and RMSE\n",
        "mae = mean_absolute_error(test_data['stars'], test_data['predicted_rating'])\n",
        "rmse = mean_squared_error(test_data['stars'], test_data['predicted_rating'], squared=False)\n",
        "\n",
        "print(f\"Rating-Based Recommendation - MAE: {mae}, RMSE: {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZLiimahfGfL",
        "outputId": "8e64d868-7803-4ff1-caf2-92474edddddc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rating-Based Recommendation - MAE: 0.004094511851545772, RMSE: 0.11738866392689609\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py:492: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_score, recall_score, f1_score\n",
        "\n",
        "\n",
        "# Convert star ratings to binary relevance for evaluation (e.g., 1 if rating >= 4, else 0)\n",
        "def relevance(row):\n",
        "    return 1 if row >= 4 else 0\n",
        "\n",
        "test_data['relevance'] = test_data['stars'].apply(relevance)\n",
        "\n",
        "# Generate recommendations for each user in the test set and evaluate\n",
        "def evaluate_recommendations(test_data, recommend_func, *args):\n",
        "    y_true = []\n",
        "    y_pred = []\n",
        "\n",
        "    for user_id in test_data['userID'].unique():\n",
        "        user_test_data = test_data[test_data['userID'] == user_id]\n",
        "        for title in user_test_data['title']:\n",
        "            recommendations = recommend_func(title, *args)  # Passing additional arguments\n",
        "            recommended_titles = recommendations['title'].values if isinstance(recommendations, pd.DataFrame) else []\n",
        "            actual_relevance = user_test_data[user_test_data['title'] == title]['relevance'].values[0]\n",
        "            y_true.append(actual_relevance)\n",
        "            y_pred.append(1 if title in recommended_titles else 0)\n",
        "\n",
        "    precision = precision_score(y_true, y_pred)\n",
        "    recall = recall_score(y_true, y_pred)\n",
        "    f1 = f1_score(y_true, y_pred)\n",
        "\n",
        "    return precision, recall, f1"
      ],
      "metadata": {
        "id": "jU4mPWJ_jA94"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate Content-Based Recommendation System\n",
        "precision, recall, f1 = evaluate_recommendations(test_data, get_recommendations_by_title)\n",
        "print(f\"Content-Based Recommendation - Precision: {precision}, Recall: {recall}, F1-score: {f1}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Gkyn9Pyq0hh",
        "outputId": "197f34ec-d482-45b3-89fc-a80f7a2a327a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Content-Based Recommendation - Precision: 0.9590336134453782, Recall: 0.03633107839235973, F1-score: 0.07000996856069319\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "# Save the rating-based recommendation DataFrame as a pickle file\n",
        "\n",
        "with open('rating_based_recommendation.pkl', 'wb') as f:\n",
        "    pickle.dump(rating_based_recommendation, f)\n",
        "\n",
        "# Save the TF-IDF matrix and vectorizer\n",
        "with open('tfidf_matrix_content.pkl', 'wb') as f:\n",
        "    pickle.dump(tfidf_matrix_content, f)\n",
        "\n",
        "with open('tfidf_vectorizer.pkl', 'wb') as f:\n",
        "    pickle.dump(tfidf_vectorizer, f)\n",
        "\n",
        "# Save the collaborative filtering model and sparse matrix\n",
        "with open('nn_model.pkl', 'wb') as f:\n",
        "    pickle.dump(nn_model, f)\n",
        "\n",
        "with open('sparse_matrix.pkl', 'wb') as f:\n",
        "    pickle.dump(sparse_matrix, f)\n",
        "\n",
        "# Save Hybrid Recommendation Function\n",
        "with open('recommend_items_hybrid.pkl', 'wb') as f:\n",
        "    pickle.dump(recommend_items_hybrid, f)\n",
        "\n",
        "# Save data for later use\n",
        "data[['userID', 'asin', 'title', 'author', 'imgUrl', 'stars', 'reviews']].to_pickle('book_data.pkl')\n",
        "\n",
        "print(\"All components have been saved successfully.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "45jbZjlD352C",
        "outputId": "36ec11b3-49ba-432e-934f-c9451fc45182"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All components have been saved successfully.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}